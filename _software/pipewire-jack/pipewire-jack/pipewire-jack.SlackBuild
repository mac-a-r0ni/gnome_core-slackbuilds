#!/bin/sh

# Copyright 2020, 2021, 2022  Eric Hameleers, Eindhoven, NL
# All rights reserved.
#
#   Permission to use, copy, modify, and distribute this software for
#   any purpose with or without fee is hereby granted, provided that
#   the above copyright notice and this permission notice appear in all
#   copies.
#
#   THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
#   WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#   IN NO EVENT SHALL THE AUTHORS AND COPYRIGHT HOLDERS AND THEIR
#   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
#   USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#   OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
#   OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#   SUCH DAMAGE.
# -----------------------------------------------------------------------------


cd $(dirname $0) ; CWD=$(pwd)

PKGNAM=pipewire-jack
SRCNAM=pipewire
VERSION=${VERSION:-0.3.70}
BUILD=${BUILD:-1}
TAG=${TAG:-_gcs}

# Automatically determine the architecture we're building on:
if [ -z "$ARCH" ]; then
  case "$(uname -m)" in
    i?86) ARCH=i586 ;;
    arm*) readelf /usr/bin/file -A | grep -E -q "Tag_CPU.*[4,5]" && ARCH=arm || ARCH=armv7hl ;;
    # Unless $ARCH is already set, use uname -m for all other archs:
    *) ARCH=$(uname -m) ;;
  esac
  export ARCH
fi

# If the variable PRINT_PACKAGE_NAME is set, then this script will report what
# the name of the created package would be, and then exit. This information
# could be useful to other scripts.
if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PKGNAM-$VERSION-$ARCH-$BUILD.txz"
  exit 0
fi

case "$ARCH" in
  i?86)      SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
             SLKLDFLAGS=""; LIBDIRSUFFIX=""
             ;;
  x86_64)    SLKCFLAGS="-O2 -fPIC"
             SLKLDFLAGS="-L/usr/lib64"; LIBDIRSUFFIX="64"
             ;;
  arm*)      SLKCFLAGS="-O2"
             SLKLDFLAGS=""; LIBDIRSUFFIX=""
             ;;
  *)         SLKCFLAGS=${SLKCFLAGS:-"O2"}
             SLKLDFLAGS=${SLKLDFLAGS:-""}; LIBDIRSUFFIX=${LIBDIRSUFFIX:-""}
             ;;
esac

case "$ARCH" in
    arm*)    TARGET=$ARCH-slackware-linux-gnueabi ;;
    *)       TARGET=$ARCH-slackware-linux ;;
esac

TMP=${TMP:-/tmp/gcs}
PKG=$TMP/package-$PKGNAM
SCRATCH=$TMP/tmp-$PKGNAM

rm -rf $PKG $SCRATCH
mkdir -p $TMP $PKG $SCRATCH

cd $TMP
rm -rf $SRCNAM-$VERSION
tar xvf $CWD/$SRCNAM-$VERSION.tar.* || exit 1
cd $SRCNAM-$VERSION || exit 1

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

# Add media-session:
( cd subprojects ; tar xf $CWD/media-session.tar.lz )

export LDFLAGS="$SLKLDFLAGS"
export CXXFLAGS="$SLKCFLAGS"
export CFLAGS="$SLKCFLAGS"
mkdir meson-build
cd meson-build
  meson setup \
    --prefix=/usr \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --mandir=/usr/man \
    --localstatedir=/var \
    --sysconfdir=/etc \
    --sysconfdir=/etc \
    --localstatedir=/var \
    --buildtype=release \
    -Djack=enabled \
    -Dpipewire-jack=enabled \
    -Dsession-managers=media-session \
    .. || exit 1

  # Build and install to a scratch directory:
  "${NINJA:=ninja}" $NUMJOBS || exit 1
  DESTDIR=$SCRATCH $NINJA install || exit 1
cd ..

# Move anything related to JACK into the package directory:
cd $SCRATCH
cp -a --parents usr/bin/pw-jack $PKG/
cp -a --parents usr/lib${LIBDIRSUFFIX}/pipewire-*/jack $PKG/
cp -a --parents usr/lib${LIBDIRSUFFIX}/spa-*/jack $PKG/

# ... and back to the source directory:
cd $TMP/$SRCNAM-$VERSION

# Strip binaries (if any):
find $PKG | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

# Add documentation:
mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION
cp -a \
  CODE_OF_CONDUCT.md COPYING INSTALL.md LICENSE NEWS PROTOCOL README.md \
  $PKG/usr/doc/$PKGNAM-$VERSION

# Add a package description:
mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
cat $CWD/slack-required > $PKG/install/slack-required

# Build the package:
cd $PKG
/sbin/makepkg -l y -c n /tmp/${PKGNAM}-${VERSION}-${ARCH}-${BUILD}${TAG}.txz
#cat $PKG/install/slack-required > /tmp/${PKGNAM}-${VERSION}-${ARCH}-${BUILD}${TAG}.dep

